#include <avr/io.h>
#include <avr/interrupt.h>
#include<util/delay.h>


unsigned char seconds=0,minutes=0,hours=0;


void display();

unsigned char flag = 0;


ISR(TIMER1_COMPA_vect) //Interrupt service routine for Timer1
{
	flag = 1;

}



void Timer1_Init_CTC_mode()
{
	TCNT1 = 0 ;  //Setting Initial Value For The Timer = 0
	OCR1A =977;  // Compare Match Value Each ONE SECOND
	TIMSK |= (1<<OCIE1A) ;   // Enable The Interrupt For Timer1 Output Compare A Match Interrupt Enable
	/* Configure timer1 control registers
		 for non PWM set FOC1A
		CTC mode Set WGM12 and For Prescalar 1024 it needs 977 millisecond
		to complete One second*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
	TCCR1B = (1<<CS12)|(1<<CS10) | (1<<WGM12) ;
}












ISR(INT0_vect) 	//Interrupt service routine for INT0 for Reset
{
seconds = 0;
minutes = 0;
hours = 0;
}



void INT0_Init()
{
	GICR |= (1<<INT0);
	MCUCR |= (1<<ISC01) ;
	MCUCR &=~ (1<<ISC00);
	DDRD &= (~(1<<PD2));				//configuring PD2 to be input
	PORTD |= (1<<PD2);				//enabling internal pull up resistance

}





ISR(INT1_vect) 		//Interrupt service routine for INT1 for Pause StopWatch
{
	/* To Pause StopWatch Clear bits of (CS12=0 CS10=0 CS11=0) To stop The Clock*/
	TCCR1B &= 0xF8;
}



void INT1_Init()
{
	DDRD &= (~(1<<PD3));				//configuring PD3 to be input

	GICR |= (1<<INT1);				//INT1 module interrupt enabled
	MCUCR |= (1<<ISC11) | (1<<ISC10);	//INT1 on rising edge
}


ISR(INT2_vect)   //Interrupt service routine for INT2 for Resume StoWatch
{
	TCCR1B |= (1<<CS10) | (1<<CS12);
}

void INT2_Init()
{
	DDRB &= (~(1<<PB2));				//configuring PB2 to be input
	PORTB |= (1<<PB2);			//enabling internal pull up resistance
	GICR |= (1<<INT2);				//enabling INT2 interrupt
	MCUCSR &= !(1<<ISC2);				//INT2 on falling edge
}


/*function to display The 6 seven segment in same time by enable the first one
 * which is PORTA=0X01 and insert the reminder of the seconds ex.. 1 % 10 = 1 and etc
 */
void display()
{
	PORTA = (1<<0);
	PORTC = seconds % 10;
	_delay_ms(2);
	PORTA = (1<<1);
	PORTC = seconds / 10;
	_delay_ms(2);
	PORTA = (1<<2);
	PORTC = minutes % 10;
	_delay_ms(2);
	PORTA = (1<<3);
	PORTC = minutes / 10;
	_delay_ms(2);
	PORTA = (1<<4);
	PORTC = hours % 10;
	_delay_ms(2);
	PORTA = (1<<5);
	PORTC = hours / 10;
	_delay_ms(2);

}




int main(void)
{
	SREG |= (1<<7);
	DDRC=0x0F; //First 4 pins OUTPUT
	PORTC &= 0xF0; // Intitiallize with zero
	DDRA|=0x3F; //First 6 Pins OUTPUT
	PORTA |=0x3F; // Enable all 7-Segemnts
	 Timer1_Init_CTC_mode(); // Generating The Timer1 in CTC Mode
	INT0_Init(); // Generating The Reset
	INT1_Init();
	for (;;)
	{
		if(flag == 1)
		{
			seconds ++ ;
				if(seconds == 60)
				{
					seconds = 0;
					minutes ++ ;
				}
				if(minutes == 60)
				{
					minutes = 0;
					hours ++ ;
				}
				if(hours == 24)
				{

					hours = 0;
				}
				flag = 0;
		}

			display();

	}
}
