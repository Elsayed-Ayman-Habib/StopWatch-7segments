#include <avr/io.h>
#include <avr/interrupt.h>
#include"util/delay.h"


unsigned char seconds=0,minutes=0,hours=0;
unsigned char seconds_count = 0;
unsigned char minutes_count = 0;
unsigned char hours_count = 0;

void display();

unsigned char flag = 0;


ISR(TIMER1_COMPA_vect) //Interrupt service routine for Timer1
{
	flag = 1;

}



void Timer1_Init()
{
	TCNT1 = 0 ;  //Setting Initial Value For The Timer = 0
	OCR1A =977;  // Compare Match Value Each ONE SECOND
	TIMSK |= (1<<OCIE1A) ;   // Enable The Interrupt For Timer1 Output Compare A Match Interrupt Enable
	/* Configure timer1 control registers
		 for non PWM set FOC1A
		CTC mode Set WGM12 and For Prescalar 1024 it needs 977 millisecond
		to complete One second*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
	TCCR1B = (1<<CS12)|(1<<CS10) | (1<<WGM12) ;
	SREG |= (1<<7); //Enable I-Bit
}












ISR(INT0_vect) 	//Interrupt service routine for INT0 for Reset
{
seconds = 0;
minutes = 0;
hours = 0;
}



void INT0_Init()
{
	GICR |= (1<<INT0);
	MCUCR |= (1<<ISC01) ;
	MCUCR&=~(1<<ISC00);
	DDRD&=(~(1<<PD2));				//configuring PD2 to be input
	PORTD|=(1<<PD2);				//enabling internal pull up resistance

}





ISR(INT1_vect) 		//Interrupt service routine for INT1 for Pause StopWatch
{
	/* To Pause StopWatch Clear bits of (CS12=0 CS10=0 CS11=0) To stop The Clock*/
	TCCR1B &= 0xF8;
}



void INT1_Init()
{
	DDRD&= (~(1<<PD3));				//configuring PD3 to be input

	GICR|=(1<<INT1);				//INT1 module interrupt enabled
	MCUCR|=(1<<ISC11)|(1<<ISC10);	//INT1 on rising edge
	SREG |=(1<<7); // Enable I-Bit
}


ISR(INT2_vect)   //Interrupt service routine for INT2 for Resume StoWatch
{
	TCCR1B |= (1<<CS10) | (1<<CS12);
}

void INT2_Init()
{
	DDRB &= (~(1<<PB2));				//configuring PB2 to be input
	PORTB|=(1<<PB2);			//enabling internal pull up resistance
	GICR|=(1<<1<<INT2);				//enabling INT2 interrupt
	MCUCSR&=~(1<<ISC2);				//INT2 on falling edge
	SREG |= (1<<7);
}


/*function to display The 6 seven segment in same time by enable the first one
 * which is PORTA=0X01 and insert the reminder of the seconds ex.. 1 % 10 = 1 and etc
 */
void display()
{
	PORTA = (1<<0);
	PORTC = seconds % 10;
	_delay_ms(2);
	PORTA = (1<<1);
	PORTC = seconds / 10;
	_delay_ms(2);
	PORTA = (1<<2);
	PORTC = minutes % 10;
	_delay_ms(2);
	PORTA = (1<<3);
	PORTC = minutes / 10;
	_delay_ms(2);
	PORTA = (1<<4);
	PORTC = hours % 10;
	_delay_ms(2);
	PORTA = (1<<5);
	PORTC = hours / 10;
	_delay_ms(2);

}




int main(void)
{

	DDRC=0x0F; //First 4 pins OUTPUT
	PORTC&=~0x0F; // Intitiallize with zero
	DDRA|=0x3F; //First 6 Pins OUTPUT
	PORTA |=0x3F; // Enable all 7-Segemnts
	Timer1_Init(); // Generating The Timer1 in CTC Mode
	INT0_Init(); // Generating The Reset
	INT1_Init();
	for (;;)
	{
		if(count_second_flag == 1)
		    	{
		    		//enter here every one second
		    		//increment seconds count
		    		seconds_count++;

		    		if(seconds_count == 60)
		    		{
		    			seconds_count = 0;
		    			minutes_count++;
		    		}
		    		if(minutes_count == 60)
		    		{
		    			minutes_count = 0;
		    			hours_count++;
		    		}
		    		if(hours_count == 24)
		    		{
		    			hours_count = 0;
		    		}
		    	    // reset the flag again
		    	    count_second_flag = 0;
		    	}
		    	else
		    	{
		    		// out the number of seconds
		    		PORTA = (PORTA & 0xC0) | 0x01;
		    		PORTC = (PORTC & 0xF0) | (seconds_count%10);

		    		// make small delay to see the changes in the 7-segment
		    		// 2Miliseconds delay will not effect the seconds count
		    		_delay_ms(2);

		    		PORTA = (PORTA & 0xC0) | 0x02;
		    		PORTC = (PORTC & 0xF0) | (seconds_count/10);

		    		_delay_ms(2);

		    		// out the number of minutes
		    		PORTA = (PORTA & 0xC0) | 0x04;
		    		PORTC = (PORTC & 0xF0) | (minutes_count%10);

		    		_delay_ms(2);

		    		PORTA = (PORTA & 0xC0) | 0x08;
		    	    PORTC = (PORTC & 0xF0) | (minutes_count/10);

		    	    _delay_ms(2);

		    	    // out the number of hours
		    	    PORTA = (PORTA & 0xC0) | 0x10;
		    	    PORTC = (PORTC & 0xF0) | (hours_count%10);

		    	    _delay_ms(2);

		    	    PORTA = (PORTA & 0xC0) | 0x20;
		    	    PORTC = (PORTC & 0xF0) | (hours_count/10);

		    	    _delay_ms(2);
		    	}
		    }
}
